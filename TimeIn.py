# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'TimeIn.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import cv2

from Jolo_Recognition.Face_Recognition import JoloRecognition as Jolo
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QGridLayout, QPushButton, QLineEdit
from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtGui, QtWidgets


class TimeIn(QtWidgets.QFrame):
    
    def __init__(self):
        super().__init__()
        
        self.setObjectName("Time In")
        self.resize(928, 565)
        
        # set up facial detection 
        self.face_detector = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
        self.B,self.G,self.R = (0,255,255)
        
        self.widget = QtWidgets.QWidget(self)
        self.widget.setGeometry(QtCore.QRect(0, 0, 1031, 571))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        self.widget.setFont(font)
        self.widget.setStyleSheet("background-color: #faf4f4")
        self.widget.setObjectName("widget")
        
        # Video
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(30, 20, 581, 521))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(18)
        self.label.setFont(font)
        self.label.setCursor(QtGui.QCursor(QtCore.Qt.ForbiddenCursor))
        self.label.setStyleSheet("border:2px solid #1a1313;\n"
"border-radius : 30%;\n"
"color: #1a1313;")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        
        # Time and Date
        self.Time_label = QtWidgets.QLabel(self.widget)
        self.Time_label.setGeometry(QtCore.QRect(620, 80, 301, 71))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(36)
        self.Time_label.setFont(font)
        self.Time_label.setStyleSheet("background-color: rgba(255, 255, 255, 0);\n"
"color: #1a1313;")
        self.Time_label.setAlignment(QtCore.Qt.AlignCenter)
        self.Time_label.setObjectName("Time_label")
        
        self.Date_label = QtWidgets.QLabel(self.widget)
        self.Date_label.setGeometry(QtCore.QRect(620, 140, 301, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(14)
        self.Date_label.setFont(font)
        self.Date_label.setStyleSheet("background-color: rgba(255, 255, 255, 0);\n"
"color: #1a1313;")
        self.Date_label.setAlignment(QtCore.Qt.AlignCenter)
        self.Date_label.setObjectName("Date_label")
        
        
        # Employee Name and ID label
        self.Result_label = QtWidgets.QLabel(self.widget)
        self.Result_label.setGeometry(QtCore.QRect(620, 220, 301, 41))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        self.Result_label.setFont(font)
        self.Result_label.setStyleSheet("background-color: rgba(255, 255, 255, 0);\n"
"color: #1a1313;")
        self.Result_label.setAlignment(QtCore.Qt.AlignCenter)
        self.Result_label.setObjectName("Result_label")
        
        self.Id_label = QtWidgets.QLabel(self.widget)
        self.Id_label.setGeometry(QtCore.QRect(620, 250, 301, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.Id_label.setFont(font)
        self.Id_label.setStyleSheet("background-color: rgba(255, 255, 255, 0);\n"
"color: #1a1313;")
        self.Id_label.setAlignment(QtCore.Qt.AlignCenter)
        self.Id_label.setObjectName("Id_label")        
        
        
        # Register Button
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setGeometry(QtCore.QRect(660, 320, 221, 51))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(14)
        self.pushButton.setFont(font)
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setStyleSheet("border-radius: 20%;\n"
"border: 2px solid #1a1313;")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("Images/icon-register.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon)
        self.pushButton.setIconSize(QtCore.QSize(32, 32))
        self.pushButton.setFlat(True)
        self.pushButton.setObjectName("pushButton")
        
        # Switch Camera
        self.pushButton_2 = QtWidgets.QPushButton(self.widget)
        self.pushButton_2.setGeometry(QtCore.QRect(660, 390, 221, 51))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(14)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_2.setStyleSheet("QPushButton {\n"
"    background: #1a1313;\n"
"border-radius: 20%;\n"
"   color: #faf4f4;\n"
"\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: #1a1313;\n"
"}")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("Images/icon-switch-white.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_2.setIcon(icon1)
        self.pushButton_2.setIconSize(QtCore.QSize(32, 32))
        self.pushButton_2.setFlat(True)
        self.pushButton_2.setObjectName("pushButton_2")
        
        # to start video streaming
        self.videoStream = cv2.VideoCapture(0)
        self.videoStream.set(4, 1080)
        
        self.video_stream = QtCore.QTimer(self)
        self.video_stream.timeout.connect(self.videoStreaming)
        self.video_stream.start(30)
         
        # start facial recogniton every seconds
        self.facial_recog = QtCore.QTimer(self)
        self.facial_recog.timeout.connect(self.runFacialRecognition)
        self.facial_recog.start(1000)  # Trigger every 1 seconds

        # get time and date
        self.timedate = QtCore.QTimer(self)
        self.timedate.timeout.connect(self.date_and_time)
        self.timedate.start(0)  

        # switch cam status
        self.camera = False
        
        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)
        
    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Frame", ""))
        self.pushButton.setText(_translate("Frame", "register"))
        self.pushButton_2.setText(_translate("Frame", "switch"))
        self.label.setText(_translate("Frame", "Loading"))
        self.Time_label.setText(_translate("Frame", "12:00 PM"))
        self.Date_label.setText(_translate("Frame", "January 73 2024")) 
        self.Result_label.setText(_translate("Frame", "Engr. Jerico Biag"))
        self.Id_label.setText(_translate("Frame", "Employee ID: 2019-201745"))

        # event function
        self.pushButton.clicked.connect(self.register)
        self.pushButton_2.clicked.connect(self.switch_camera)
    
    def videoStreamingStart(self):
        self.videoStream = cv2.VideoCapture(0)
        self.videoStream.set(4, 1080)
        
    def runFacialRecognition(self):
        ret, frame = self.videoStream.read()
        
        if not ret:
            return
        
        # load facial detection
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = self.face_detector.detectMultiScale(gray,
                                                    scaleFactor=1.1,
                                                    minNeighbors=20,
                                                    minSize=(100, 100),
                                                    flags=cv2.CASCADE_SCALE_IMAGE)
        # verify it has faces
        for (x, y, w, h) in faces:    
            return self.FacialRecognition(frame=frame)  # Assuming your FacialRecognition function accepts a frame

        self.Result_label.setText("loading")
        self.Id_label.setText("Employee ID: n/a")
        self.B,self.G,self.R = (0,255,255)
        
    def videoStreaming(self):
        ret, frame = self.videoStream.read()
        
        # if no detected frames
        if not ret:
            self.label.setText("Oops! We can't find your camera.\nMake sure it's plugged in and there are no issues.")
            return
        
        frame = cv2.flip(frame, 1)
        
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                
        # load facial detection
        faces = self.face_detector.detectMultiScale(gray,
                                                    scaleFactor=1.1,
                                                    minNeighbors=20,
                                                    minSize=(100, 100),
                                                    flags=cv2.CASCADE_SCALE_IMAGE)
        
        for (x, y, w, h) in faces:      
            cv2.rectangle(frame, (x, y), (x+w, y+h), (self.B,self.G,self.R), 2)
            
        
        # display the frame on the label
        height, width, channel = frame.shape
        bytesPerLine = channel * width
        qImg = QtGui.QImage(frame.data, width, height, bytesPerLine, QtGui.QImage.Format_BGR888)
        pixmap = QtGui.QPixmap.fromImage(qImg)
        self.label.setPixmap(pixmap)
        
    # open register
    def register(self):
        from Register import Register
        
        self.videoStream.release()
        cv2.destroyAllWindows()
        
        Register = Register(self)
        Register.show()
        
    #  facial recognition function
    def FacialRecognition(self, frame):
        try:
     
            result = Jolo().Face_Compare(frame)
        
            current_date = QtCore.QDate.currentDate().toString("MMMM dd yyyy")
            current_time = QtCore.QTime.currentTime().toString("h:mm:ss AP")
         
            self.R,self.G,self.B = (255,0,0) if result[0] == 'No match detected' else (0,255,0)
            status = False if result[0] == 'No match detected' else True
            
            self.Result_label.setText(result[0])
            self.Id_label.setText("Employee ID: n/a" if result[0] == 'No match detected' else "Employee ID: 2019-201745" )
            return status
        
        except:
            pass
            return False
    
    # Date and Time
    def date_and_time(self):
        current_date = QtCore.QDate.currentDate().toString("MMMM dd yyyy")
        
        current_time = QtCore.QTime.currentTime().toString("h:mm AP")
    
        
        self.Time_label.setText(current_time)
        self.Date_label.setText(current_date)
    
    # switch camera
    def switch_camera(self):
        self.video_stream.stop()
        self.videoStream.release()

        
        self.camera ^= True
        index = int(self.camera)
        
        self.videoStream = cv2.VideoCapture(index)
        self.video_stream.start(30)
        

if __name__ == "__main__":
    
    import sys
    # Create a new QApplication object
    app = QApplication(sys.argv)

    New_menu = TimeIn()
    New_menu.show() 

    sys.exit(app.exec_())
